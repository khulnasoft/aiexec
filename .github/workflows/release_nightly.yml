name: Aiexec Nightly Build
run-name: Aiexec Nightly Release by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      build_docker_base:
        description: "Build Docker Image for Aiexec Nightly Base"
        required: true
        type: boolean
        default: false
      build_docker_main:
        description: "Build Docker Image for Aiexec Nightly"
        required: true
        type: boolean
        default: false
      build_docker_ep:
        description: "Build Docker Image for Aiexec Nightly with Entrypoint"
        required: false
        type: boolean
        default: false
      build_wfx:
        description: "Build and release WFX package"
        required: false
        type: boolean
        default: false
      nightly_tag_main:
        description: "Tag for the nightly main build"
        required: true
        type: string
      nightly_tag_base:
        description: "Tag for the nightly base build"
        required: true
        type: string
      nightly_tag_wfx:
        description: "Tag for the nightly WFX build"
        required: false
        type: string
  workflow_call:
    inputs:
      build_docker_base:
        description: "Build Docker Image for Aiexec Nightly Base"
        required: true
        type: boolean
        default: false
      build_docker_main:
        description: "Build Docker Image for Aiexec Nightly"
        required: true
        type: boolean
        default: false
      build_docker_ep:
        description: "Build Docker Image for Aiexec Nightly with Entrypoint"
        required: false
        type: boolean
        default: false
      build_wfx:
        description: "Build and release WFX package"
        required: false
        type: boolean
        default: false
      nightly_tag_main:
        description: "Tag for the nightly main build"
        required: true
        type: string
      nightly_tag_base:
        description: "Tag for the nightly base build"
        required: true
        type: string
      nightly_tag_wfx:
        description: "Tag for the nightly WFX build"
        required: false
        type: string

env:
  POETRY_VERSION: "1.8.3"
  PYTHON_VERSION: "3.13"

jobs:
  build-nightly-wfx:
    name: Build WFX Nightly
    if: ${{ inputs.build_wfx == true }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.verify.outputs.version }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.nightly_tag_main }}
          persist-credentials: true
      - name: "Setup Environment"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: ${{ env.PYTHON_VERSION }}
          prune-cache: false
      - name: Install WFX dependencies
        run: cd src/wfx && uv sync

      - name: Verify Nightly Name and Version
        id: verify
        run: |
          cd src/wfx
          name=$(uv tree | grep 'wfx' | head -n 1 | awk '{print $1}')
          version=$(uv tree | grep 'wfx' | head -n 1 | awk '{print $2}')
          if [ "$name" != "wfx-nightly" ]; then
            echo "Name $name does not match wfx-nightly. Exiting the workflow."
            exit 1
          fi
          if [ "$version" != "${{ inputs.nightly_tag_wfx }}" ]; then
            echo "Version $version does not match nightly tag ${{ inputs.nightly_tag_wfx }}. Exiting the workflow."
            exit 1
          fi
          # Strip the leading `v` from the version
          version=$(echo $version | sed 's/^v//')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build WFX for distribution
        run: |
          cd src/wfx
          rm -rf dist/
          uv build --wheel --out-dir dist

      - name: Test WFX CLI
        run: |
          cd src/wfx
          uv pip install dist/*.whl --force-reinstall
          uv run wfx --help
          echo "WFX CLI test completed successfully"

      # PyPI publishing moved to after cross-platform testing

      - name: Upload WFX Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-nightly-wfx
          path: src/wfx/dist

  build-nightly-base:
    name: Build Aiexec Nightly Base
    needs: [build-nightly-wfx]
    if: always() && (needs.build-nightly-wfx.result == 'success' || inputs.build_wfx == false)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      version: ${{ steps.verify.outputs.version }}
      skipped: ${{ steps.verify.outputs.skipped }}
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.nightly_tag_main }}
          persist-credentials: true
      - name: "Setup Environment"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: ${{ env.PYTHON_VERSION }}
          prune-cache: false
      - name: Install the project
        run: uv sync

      - name: Wait for PyPI Propagation
        if: ${{ inputs.build_wfx == true }}
        run: sleep 300 # wait for 5 minutes to ensure PyPI propagation of WFX

      - name: Verify Nightly Name and Version
        id: verify
        run: |
          name=$(uv tree | grep 'aiexec-base' | awk '{print $2}' | head -n 1)
          version=$(uv tree | grep 'aiexec-base' | awk '{print $3}' | head -n 1)
          if [ "$name" != "aiexec-base-nightly" ]; then
            echo "Name $name does not match aiexec-base-nightly. Exiting the workflow."
            exit 1
          fi
          if [ "$version" != "${{ inputs.nightly_tag_base }}" ]; then
            echo "Version $version does not match nightly tag ${{ inputs.nightly_tag_base }}. Exiting the workflow."
            exit 1
          fi
          # Strip the leading `v` from the version
          version=$(echo $version | sed 's/^v//')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build Aiexec Base for distribution
        run: |
          rm -rf src/backend/base/dist
          rm -rf dist
          make build base=true args="--wheel"

      - name: Test Aiexec Base CLI
        run: |
          # TODO: Unsure why the whl is not built in src/backend/base/dist
          mkdir src/backend/base/dist
          mv dist/*.whl src/backend/base/dist/
          uv pip install src/backend/base/dist/*.whl
          uv run python -m aiexec run --host localhost --port 7860 --backend-only &
          SERVER_PID=$!
          # Wait for the server to start
          timeout 120 bash -c 'until curl -f http://localhost:7860/api/v1/auto_login; do sleep 2; done' || (echo "Server did not start in time" && kill $SERVER_PID && exit 1)
          # Terminate the server
          kill $SERVER_PID || (echo "Failed to terminate the server" && exit 1)
          sleep 20 # give the server some time to terminate
          # Check if the server is still running
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Failed to terminate the server"
            exit 0
          else
            echo "Server terminated successfully"
          fi

      # PyPI publishing moved to after cross-platform testing

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-nightly-base
          path: src/backend/base/dist

  build-nightly-main:
    name: Build Aiexec Nightly Main
    needs: [build-nightly-base]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.verify.outputs.version }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.nightly_tag_main}}
          persist-credentials: true
      - name: "Setup Environment"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: ${{ env.PYTHON_VERSION }}
          prune-cache: false
      - name: Install the project
        run: uv sync

      - name: Verify Nightly Name and Version
        id: verify
        run: |
          name=$(uv tree | grep 'aiexec' | grep -v 'aiexec-base' | awk '{print $1}')
          version=$(uv tree | grep 'aiexec' | grep -v 'aiexec-base' | awk '{print $2}')
          if [ "$name" != "aiexec-nightly" ]; then
            echo "Name $name does not match aiexec-nightly. Exiting the workflow."
            exit 1
          fi
          if [ "$version" != "${{ inputs.nightly_tag_main }}" ]; then
            echo "Version $version does not match nightly tag ${{ inputs.nightly_tag_main }}. Exiting the workflow."
            exit 1
          fi
          # Strip the leading `v` from the version
          version=$(echo $version | sed 's/^v//')
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Wait for PyPI Propagation
        if: needs.build-nightly-base.outputs.skipped == 'false'
        run: sleep 300 # wait for 5 minutes to ensure PyPI propagation of base

      - name: Build Aiexec Main for distribution
        run: make build main=true args="--no-sources --wheel"
      - name: Test Aiexec Main CLI
        run: |
          uv pip install dist/*.whl
          uv run python -m aiexec run --host localhost --port 7860 --backend-only &
          SERVER_PID=$!
          # Wait for the server to start
          timeout 120 bash -c 'until curl -f http://localhost:7860/health_check; do sleep 2; done' || (echo "Server did not start in time" && kill $SERVER_PID && exit 1)
          # Terminate the server
          kill $SERVER_PID || (echo "Failed to terminate the server" && exit 1)
          sleep 20 # give the server some time to terminate
          # Check if the server is still running
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Failed to terminate the server"
            exit 0
          else
            echo "Server terminated successfully"
          fi

      # PyPI publishing moved to after cross-platform testing

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-nightly-main
          path: dist

  test-cross-platform:
    name: Test Cross-Platform Installation
    needs: [build-nightly-wfx, build-nightly-base, build-nightly-main]
    uses: ./.github/workflows/cross-platform-test.yml
    with:
      base-artifact-name: "dist-nightly-base"
      main-artifact-name: "dist-nightly-main"
      wfx-artifact-name: "dist-nightly-wfx"

  publish-nightly-wfx:
    name: Publish WFX Nightly to PyPI
    needs: [build-nightly-wfx, test-cross-platform]
    if: ${{ inputs.build_wfx == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v5
      - name: Download WFX artifact
        uses: actions/download-artifact@v5
        with:
          name: dist-nightly-wfx
          path: src/wfx/dist
      - name: Setup Environment
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
          python-version: "3.13"
      - name: Publish WFX to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          make wfx_publish

  publish-nightly-base:
    name: Publish Aiexec Base Nightly to PyPI
    needs: [build-nightly-base, test-cross-platform, publish-nightly-wfx]
    if: always() && needs.build-nightly-base.result == 'success' && needs.test-cross-platform.result == 'success' && (needs.publish-nightly-wfx.result == 'success' || inputs.build_wfx == false)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Download base artifact
        uses: actions/download-artifact@v5
        with:
          name: dist-nightly-base
          path: src/backend/base/dist
      - name: Setup Environment
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
          python-version: "3.13"
      - name: Publish base to PyPI
        if: needs.build-nightly-base.outputs.skipped == 'false'
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          make publish base=true

  publish-nightly-main:
    name: Publish Aiexec Main Nightly to PyPI
    needs: [build-nightly-main, test-cross-platform, publish-nightly-base]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Download main artifact
        uses: actions/download-artifact@v5
        with:
          name: dist-nightly-main
          path: dist
      - name: Setup Environment
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
          python-version: "3.13"
      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          make publish main=true

  call_docker_build_base:
    name: Call Docker Build Workflow for Aiexec Base
    if: always() && ${{ inputs.build_docker_base == 'true' }}
    needs: [build-nightly-base, build-nightly-main]
    uses: ./.github/workflows/docker-build.yml
    with:
      release_type: nightly-base
      base_version: ${{ inputs.nightly_tag_base }}
      main_version: ${{ inputs.nightly_tag_main }}
    secrets: inherit

  call_docker_build_main:
    name: Call Docker Build Workflow for Aiexec
    if: always() && ${{ inputs.build_docker_main == 'true' }}
    needs: [build-nightly-main, call_docker_build_base]
    uses: ./.github/workflows/docker-build.yml
    with:
      release_type: nightly-main
      main_version: ${{ inputs.nightly_tag_main }}
    secrets: inherit

  # TODO: Uncomment this when our runner can fit the builds that contain pytorch (and other large dependencies)
  # call_docker_build_main_all:
  #   name: Call Docker Build Workflow for aiexec-all
  #   if: always() && ${{ inputs.build_docker_main == 'true' }}
  #   needs: [build-nightly-main]
  #   uses: ./.github/workflows/docker-build.yml
  #   with:
  #     release_type: nightly-main-all
  #     main_version: ${{ inputs.nightly_tag_main }}
  #   secrets: inherit

  call_docker_build_main_ep:
    name: Call Docker Build Workflow for Aiexec with Entrypoint
    if: always() && ${{ inputs.build_docker_ep == 'true' }}
    needs: [build-nightly-main, call_docker_build_main]
    uses: ./.github/workflows/docker-build.yml
    with:
      release_type: main-ep
      main_version: ${{ inputs.nightly_tag_main }}
    secrets: inherit
